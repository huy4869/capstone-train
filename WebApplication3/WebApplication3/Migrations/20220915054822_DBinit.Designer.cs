// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace WebApplication3.Migrations
{
    [DbContext(typeof(MySQLContext))]
    [Migration("20220915054822_DBinit")]
    partial class DBinit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("WebApplication3.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("countryCode")
                        .IsRequired()
                        .HasColumnType("char(3)");

                    b.Property<string>("district")
                        .HasColumnType("char(20)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("char(35)");

                    b.Property<int>("population")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_city");

                    b.HasIndex("countryCode");

                    b.HasIndex("name")
                        .HasDatabaseName("Idx_FirstName");

                    b.ToTable("city");
                });

            modelBuilder.Entity("WebApplication3.Models.Country", b =>
                {
                    b.Property<string>("countryCode")
                        .HasColumnType("char(3)")
                        .HasColumnName("Code");

                    b.Property<decimal?>("GNP")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("GNPOld")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("capital")
                        .HasColumnType("int");

                    b.Property<string>("code2")
                        .HasColumnType("char(2)");

                    b.Property<string>("continent")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("governmentForm")
                        .HasColumnType("char(45)");

                    b.Property<string>("headOfState")
                        .HasColumnType("char(45)");

                    b.Property<short?>("indepYear")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("lifeExpectancy")
                        .HasColumnType("decimal(3,1)");

                    b.Property<string>("localName")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("char(52)");

                    b.Property<int?>("population")
                        .HasColumnType("int");

                    b.Property<string>("region")
                        .HasColumnType("char(26)");

                    b.Property<decimal?>("surfaceArea")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("countryCode")
                        .HasName("PK_CountryCode");

                    b.HasIndex("name")
                        .IsUnique()
                        .HasDatabaseName("Idx_Name");

                    b.ToTable("country");
                });

            modelBuilder.Entity("WebApplication3.Models.City", b =>
                {
                    b.HasOne("WebApplication3.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("countryCode")
                        .HasConstraintName("FK_city_country")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
